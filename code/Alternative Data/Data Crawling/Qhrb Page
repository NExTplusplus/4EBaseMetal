import argparse
import time
import datetime
import sys
import pickle
from random import randint
import pandas as pd
import numpy as np

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.common.exceptions import *
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.proxy import Proxy, ProxyType

# This is the main data crawling function, chrome_driver_path is the path to the chrome driver. start_page is which page to start from
def crawl_page_links_qhrb(chrome_driver_path,start_page):
    driver = webdriver.Chrome(chrome_driver_path)
    print('init driver')
    current_website_link =  "http://www.qhrb.com.cn/organ/organsee/" +str(start_page)+".shtml"
    driver.get(current_website_link)
    title_list =[]
    url_list =[]
    current_length = 0
    print('load page')
    time.sleep(5)
    print('processing')
    page_n = start_page
    try:
        while True:
            
            links = driver.find_elements_by_xpath("//ul[@class='list list-point']/li[@class='item']")
            print('page %s:'%page_n , len(links))
            for cur_link in links:
                current_length+=1
                url_list.append(cur_link.find_elements_by_tag_name('a')[0].get_attribute(u'href'))
                title_list.append(cur_link.text)
            
            next_link = driver.find_elements_by_xpath("//div[@class='page-box clear ov']/ul/li/a")[-1].get_attribute('href')
            if next_link == u'javascript:void(0);' :
                driver.close()
                break
            else:
                current_website_link = next_link
                driver.get(current_website_link)
            page_n+=1
            time.sleep(5)
    except Exception as e: 
        print(e)
        current_length -=1
        result = pd.DataFrame({'url': url_list[:current_length],'title': title_list[:current_length]})
        print(current_length)
        print('Program Died')
        return result
    
    result = pd.DataFrame({'url': url_list,'title': title_list})
    print("Completed")
    return result

# drop specific time from title
def drop_time(string):
    string = string.replace(" ","")
    try:
        float(string[-5])
    except:
        return string[:-4]
    return string[:-5]
    
# Extract information of day from title
def add_day (string):
    string = string[:-1]
    try:
        float(string[-2])
    except:
        return "0"+string[-1]
    return string[-2:]
    
# Delete information of day from title
def delete_day(string):
    string = string[:-1]
    try:
        float(string[-2])
    except:
        return string[:-1]
    return string[:-2]

# Extract information of month from title
def add_month(string):
    string = string[:-1]
    try:
        float(string[-2])
    except:
        return "0" + (string[-1])
    if float(string[-2])==1:
        try:
            float(string[-3])
        except:
            return string[-2:]
        return np.nan
    else:
        return "0"+string[-1:]

# Delete information of month from title
def delete_month(string):
    string = string[:-1]
    try:
        float(string[-2])
    except:
        return string[:-1]
    if float(string[-2])==1:
        try:
            float(string[-3])
        except:
            return string[:-2]
        return string
    else:
        return string[:-1]

# Add in year based on month extracted from title
def add_year(month):
    year_list =[]
    current_year = 2018
    current_month = int(month.iloc[0])
    for i in range(0,len(month)):
        if int(month.iloc[i]) > current_month:
            current_year-=1
        current_month = int(month.iloc[i])
        year_list.append(str(current_year))
    return pd.Series(year_list)

# Convert day,month and year extracted by above funcions into datetime  
def convert_date(day,month,year):
    date_list =[]
    for i in range(0,len(day)):
        date = pd.to_datetime(year.iloc[i]+month.iloc[i]+day.iloc[i])
        date_list.append(date)
    return pd.Series(date_list)
    
    
# Sample
qhrb_df =crawl_page_links_qhrb(1)
qhrb_df['title'] = qhrb_df['title'].apply(drop_time)
qhrb_df['day'] = qhrb_df['title'].apply(add_day)
qhrb_df['title'] = qhrb_df['title'].apply(delete_day)
qhrb_df['month'] = qhrb_df['title'].apply(add_month)
qhrb_df['title'] = qhrb_df['title'].apply(delete_month)

# Manual Checking is required
indices = np.where(qhrb_df.month.isna())
qhrb_df.at[829, 'month'] = "04"
qhrb_df.at[829, 'title'] = qhrb_df1.at[829, 'title'][:-9]
qhrb_df.at[865, 'month'] = "04"
qhrb_df.at[865, 'title'] = qhrb_df1.at[865, 'title'][:-9]
qhrb_df.at[937, 'month'] = "03"
qhrb_df.at[937, 'title'] = qhrb_df1.at[937, 'title'][:-9]

#  Induct from month , Add in year and completed
qhrb_df['Year'] = add_year(qhrb_df.month)
