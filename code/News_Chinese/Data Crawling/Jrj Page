import argparse
import time
import datetime
import sys
import pickle
from random import randint
import pandas as pd

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.common.exceptions import *
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.proxy import Proxy, ProxyType


# This is the main data crawling function, chrome_driver_path is the path to the chrome driver. Date is which date to start and it is a string "YYYYMMDD"
def crawl_page_links_jrj(chrome_driver_path,date):
    driver = webdriver.Chrome(chrome_driver_path)
    print('init driver')
    current_website_link = "http://futures.jrj.com.cn/xwk/" + date[:6]+"/" + date +"_1.shtml"
    driver.get(current_website_link)
    title_list =[]
    url_list =[]
    date_list =[]
    current_length = 0
    print('load page')
    time.sleep(5)
    print('processing')
    page_n = date
    try:
        while True:
            
            links = driver.find_elements_by_xpath("//ul[@class='list']/li/a")
            dates = driver.find_elements_by_xpath("//ul[@class='list']/li/span")
            print('date %s:'%page_n , len(dates))
            for cur_link,cur_date in zip(links,dates):
                current_length +=1
                url_list.append(cur_link.get_attribute(u'href'))
                title = cur_link.text
                date = cur_date.text.split(" ")[0]
                title_list.append(title)
                date_list.append(pd.to_datetime(date,infer_datetime_format=True))
            
            next_link_list = driver.find_elements_by_xpath("//p[@class='page_newslib']/a")
            
            if len(next_link_list)==0 or next_link_list[-1].get_attribute('href') == None :
                next_page = driver.find_elements_by_xpath("//p[@class='tr']/a")[0].get_attribute('href')
                if next_page == None:
                    break
                current_website_link = next_page
                page_n = current_website_link[-16:-8]
                driver.get(current_website_link)
            else:
                next_link = next_link_list[-1].get_attribute('href')
                current_website_link = next_link
                driver.get(current_website_link)
            
            time.sleep(5)
    except Exception as e: 
        print(e)
        current_length -=1
        result = pd.DataFrame({'url': url_list[:current_length],'title': title_list[:current_length],'date':date_list[:current_length]})
        print(current_length)
        print('Program Died')
        return result
    
    result = pd.DataFrame({'url': url_list,'title': title_list,'date':date_list})
    print("Completed")
    return result


#Sample 
jrj_df = crawl_page_links_jrj('/home/liangchen/4e/Data Crawling/chromedriver', "20140604")

